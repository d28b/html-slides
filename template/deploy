#! /usr/bin/env node
'use strict';

// Load dependencies
const fs = require('fs');
const path = require('path');
const process = require('process');
const child_process = require('child_process');
const vm = require('vm');

// Configuration
var uploadScript = 'upload-' + (process.argv[2] || 'default');
var continuously = true;

// Constants
var ansi = {
	reset: String.fromCharCode(0x1b) + '[0m',
	red: String.fromCharCode(0x1b) + '[0;38;5;196m',
	orange: String.fromCharCode(0x1b) + '[0;38;5;166m',
	lightGray: String.fromCharCode(0x1b) + '[0;38;5;249m',
	mediumGray: String.fromCharCode(0x1b) + '[0;38;5;243m',
	darkGray: String.fromCharCode(0x1b) + '[0;38;5;237m',
	blue: String.fromCharCode(0x1b) + '[0;38;5;33m',
	};

var tagDefinitions = {
	area: {isEmpty: true},
	base: {isEmpty: true},
	br: {isEmpty: true},
	col: {isEmpty: true},
	embed: {isEmpty: true},
	hr: {isEmpty: true},
	img: {isEmpty: true},
	input: {isEmpty: true, attributes: {autofocus: 'boolean', disabled: 'boolean', checked: 'boolean', readonly: 'boolean', required: 'boolean'}},
	keygen: {isEmpty: true},
	link: {isEmpty: true},
	meta: {isEmpty: true},
	param: {isEmpty: true},
	script: {attributes: {'async': 'boolean'}},
	source: {isEmpty: true},
	textarea: {attributes: {autofocus: 'boolean', disabled: 'boolean', readonly: 'boolean', required: 'boolean'}},
	track: {isEmpty: true},
	video: {attributes: {controls: 'boolean'}},
	wbr: {isEmpty: true},
	};

// Run
var modifiedFiles = [];
var statCache = new StatCache();
var rules = new RuleSet();
var lastFullScan = 0;
run();

function run() {
	// Prepare
	statCache.clear();
	modifiedFiles = [];

	// Scan the folder for new files every 10 seconds
	var now = new Date().getTime();
	if (lastFullScan < now - 10 * 1000) {
		scanFolder('.');
		lastFullScan = now;
	}

	// Execute the rules
	rules.execute();

	// Upload
	upload(done);

	function done() {
		if (! continuously) process.exit(0);
		setTimeout(run, 1000);
	}

	function scanFolder(folder) {
		var files = fs.readdirSync(folder);
		for (var file of files) {
			if (file.match(/^\./)) continue;
			var fullPath = path.join(folder, file);
			var stat = statCache.stat(fullPath);
			if (stat.isDir) scanFolder(fullPath);
			else if (stat.isFile) scanFile(fullPath);
		}
	}

	function scanFile(file) {
		if (rules.get(file)) return;
		if (file.match(/\.inc\.[0-9a-zA-Z]*$/)) return;
		if (file.match(/\.lib\.[0-9a-zA-Z]*$/)) return;
		if (file.match(/\.orig$/)) return;
		if (file.match(/^deploy$/)) return;
		if (file.match(/^upload-[0-9a-zA-Z]+$/)) return;

		if (checkRule(/\.build\.(html|js|css)$/, runHTMLRule)) return;
		if (checkRule(/\.translate$/, runTranslationRule)) return;
		if (checkRule(/\.rule\.js$/, runExternalRule)) return;
		rules.set(file, createRule(runMarkForUploadRule));

		function checkRule(filter, handler) {
			var match = file.match(filter);
			if (! match) return false;
			rules.set(file, createRule(handler));
			return true;
		}

		function createRule(handler) {
			var rule = {handler: handler, dependencies: {}, file: file};
			rule.addDependency = function(file) { this.dependencies[file] = statCache.stat(file).mtime; };
			rule.dependencies[file] = 0;
			return rule;
		}
	}
}

function RuleSet() {
	var rules = {};

	this.get = function(name) {
		return rules[name];
	};

	this.set = function(name, rule) {
		rules[name] = rule;
	};

	this.remove = function(name) {
		delete rules[name];
	};

	this.execute = function() {
		while (executeOnce()) { }
	};

	function executeOnce() {
		var hasChanges = false;
		for (var name in rules)
			if (executeIfNecessary(name, rules[name])) hasChanges = true;
		return hasChanges;
	}

	function executeIfNecessary(name, rule) {
		for (var file in rule.dependencies) {
			var mtime = statCache.stat(file).mtime;
			if (mtime == rule.dependencies[file]) continue;

			// Delete the rule if the file has vanished
			var mtime = statCache.stat(rule.file).mtime;
			if (mtime == 0) return delete rules[name];

			// Restart with new dependencies
			rule.dependencies = {};
			rule.dependencies[rule.file] = mtime;

			// Execute the handler
			rule.handler(name, rule);
			return true;
		}

		return false;
	}
}

function runMarkForUploadRule(name, rule) {
	modifiedFiles.push(rule.file);
}

function upload(doneHandler) {
	if (! modifiedFiles.length) return doneHandler();

	var stat = statCache.stat(uploadScript);
	if (! stat.isFile) return doneHandler();

	logBlue('Uploading ' + (modifiedFiles.length == 1 ? '1 file' : modifiedFiles.length + ' files'));
	child_process.spawn('./' + uploadScript, modifiedFiles, {stdio: 'inherit'}).on('close', doneHandler);
}

function runExternalRule(name, rule) {
	var code = readTextFileSync(rule.file);
	if (code == null) return;

	var match = code.match(/^#\!.*?\n(.*)$/s);
	if (match) code = match[1];

	try {
		vm.runInContext(code, createDefaultContext({rule: rule}), {filename: rule.file});
	} catch (e) {
		logRunError(e);
	}
}

function runHTMLRule(name, rule) {
	// Prepare
	var output = [];
	var tagStack = [];
	var match = rule.file.match(/^(.*)\.build\.([0-9a-zA-Z]*)$/);
	var context = createDefaultContext({
		rule: rule,
		target: match[1] + '.' + match[2],
		format: match[2],
		byteSequences: {},
		ids: {},
		});

	// Include all files
	logBlue('Rebuilding ' + context.target);
	includeFile(rule.file, '');

	// Finalize the output
	var mapped = [];
	for (var piece of output)
		mapped.push(typeof piece == 'object' ? piece.handler(piece) : piece);
	var outputText = mapped.join('').replace(/[ \t]+\n/g, '\n').replace(/\n\n\n+/g, '\n\n') + '\n';

	// Write the new file
	writeTextFileSync(context.target, outputText);
	return true;

	function includeFile(fullPath, indent) {
		// Add this source
		rule.addDependency(fullPath);

		// Read and include
		var content = readTextFileSync(fullPath);
		if (content == null) return;

		return include(content.trim(), indent, path.dirname(fullPath), fullPath);
	}

	function include(content, indent, folder, source) {
		// Prepare the output
		var includedPos = 0;

		// Parser
		var pos = 0;
		var cp = content.codePointAt(pos);
		var lineNumber = 1;
		var startOfLinePos = 0;
		var startOfLineContentPos = cp == 9 ? -1 : 0;
		var atTagStart = here();

		function next() {
			pos += 1;
			cp = content.codePointAt(pos) || -1;
			if (cp == 10) {
				lineNumber += 1;
				startOfLinePos = pos + 1;
				startOfLineContentPos = -1;
			} else if (cp == 13) {
				warning(here(), 'Windows line endings (CRLF) found.');
			} else if (cp != 9 && startOfLineContentPos == -1) {
				startOfLineContentPos = pos;
			}
		};

		// Parse
		if (context.format == 'js') parseJavaScript(false);
		else if (context.format == 'css') parseCSS(false);
		else parseHTML();
		includeUntil(pos);

		function parseHTML() {
			while (cp != -1) {
				var before = here();
				if (eat('<')) parseTag();
				else if (eat('>')) warning(before, 'Stray ">"');
				else next();
			}
		}

		function parseTag() {
			atTagStart = here();
			if (eat('?')) {
				parseSpecialTag();
			} else if (eat('!')) {
				parseDocTypeOrCommentTag();
			} else if (eat('/')) {
				parseClosingTag();
			} else if (isWhiteSpace(cp)) {
				warning(atTagStart, 'Stray "<"');
				return;
			} else {
				parseNormalTag();
			}
		}

		function parseSpecialTag() {
			includeUntil(pos - 2);
			skipWhiteSpace();
			var subIndent = currentIndent();

			if (eatWord('include')) {
				var file = readUntil('?>').trim();
				includeFile(path.join(folder, file), subIndent);
			} else if (eatWord('import')) {
				var file = readUntil('?>').trim();
				var fullPath = path.join(folder, file);
				rule.addDependency(fullPath);
				var code = readTextFileSync(fullPath);
				if (code != null) runInContext(code, atTagStart, subIndent, path.dirname(fullPath));
			} else {
				var code = readUntil('?>');
				include(runInContext(code, atTagStart, subIndent, folder), subIndent, folder, source + ':script:' + lineNumber + ':' + startOfLinePos);
			}

			includedPos = pos;
		}

		function currentIndent() {
			var endPos = startOfLineContentPos == -1 ? pos : startOfLineContentPos;
			return indent + content.substr(startOfLinePos, startOfLineContentPos - startOfLinePos);
		}

		function parseNormalTag() {
			var tagName = readXmlWord();
			var isClosing = false;
			var tagDefinition = tagDefinitions[tagName] || {};
			var tagAttributes = tagDefinition.attributes || {};
			while (cp != -1) {
				skipWhiteSpace();
				if (eat('>')) break;
				var before = here();
				if (eatText('/>')) {
					if (tagDefinition.isEmpty) warning(before, 'Closed empty tag <' + tagName + ' />.');
					isClosing = true;
					break;
				}

				var key = readXmlWord();
				if (key == '') return skipRest('Expecting an argument name.');

				skipWhiteSpace();
				if (! eat('=')) {
					if (tagAttributes[key] == 'boolean') continue;
					return skipRest('Expecting = (EQUAL SIGN).');
				}

				skipWhiteSpace();
				var atValueStart = here();
				if (! eat('"')) return skipRest('Expecting " (QUOTATION MARK).');
				includeUntil(pos);
				var value = parseArgumentValue();
				output.push(value);
				includedPos = pos - 1;

				if (key == 'id') addId(value, atValueStart);
			}

			if (tagName == 'script') {
				context.format = 'js';
				parseJavaScript(true);
				context.format = 'html';
			} else if (tagName == 'style') {
				context.format = 'css';
				parseCSS(true);
				context.format = 'html';
			} else {
				if (! isClosing && ! tagDefinition.isEmpty && tagStack) tagStack.push(tagName);
			}

			function skipRest(message) {
				warning(here(), message);
				readUntil('>');
			}
		}

		function parseArgumentValue() {
			var text = '';
			var startPos = pos;
			while (cp != -1) {
				if (eat('"')) break;

				if (eatText('<?')) {
					text += content.substr(startPos, pos - startPos - 2);
					var atStart = here();
					var code = readUntil('?>');
					text += runInContext(code, atStart, folder);
					startPos = pos;
				} else {
					next();
				}
			}

			text += content.substr(startPos, pos - startPos - 1);
			return text;
		}

		function parseClosingTag() {
			var tagName = readUntil('>').trim();
			if (! tagStack) return;
			var openTagName = tagStack.pop();
			if (openTagName == null) {
				warning(atTagStart, 'No tag left to close.');
				tagStack = null;
			} else if (openTagName != tagName) {
				warning(atTagStart, 'Wrong closing tag </' + tagName + '>, expecting </' + openTagName + '>.');
				tagStack = null;
			}
		}

		function parseDocTypeOrCommentTag() {
			if (eatText('--')) {
				includeUntil(pos - 4);
				readUntil('-->');
				includedPos = pos;
			} else if (eatWord('DOCTYPE')) {
				readUntil('>');
			} else {
				var text = readUntil('>');
				warning(atTagStart, 'Weird tag <!' + text + '> is probably an error.');
			}
		}

		function parseJavaScript(isInsideHtml) {
			var typeCheckOutput = [];
			while (cp != -1) {
				if (pos == startOfLinePos) {
					includeUntil(pos);
					for (var text of typeCheckOutput)
						output.push(text);
					typeCheckOutput = [];
				}

				if (pos == startOfLineContentPos) {
					var subIndent = currentIndent();
					if (eatWord('GENERATED JAVASCRIPT')) {
						includeUntil(pos - 20);
						includedPos = pos;
						output.push({handler: generateJavaScript, indent: subIndent});
						continue;
					} else if (eatText('INCLUDE')) {
						includeUntil(pos - 7);
						var subIndent = currentIndent();
						var file = readUntil('\n').trim();
						console.log('include js', folder, file);
						includeFile(path.join(folder, file), subIndent);
						includedPos = pos - 1;
						continue;
					} else if (eatText('--')) {
						includeUntil(pos - 2);
						var line = readUntil('\n').trim();
						output.push('console.log(' + line + ');');
						includedPos = pos - 1;
						continue;
					}
				}

				if (parseByteString()) {
				} else if (cp == 34) {
					next();
					skipUntilNotEscaped(34);
				} else if (cp == 39) {
					next();
					skipUntilNotEscaped(39);
				} else if (eatText('!!')) {
					// Dynamic type checks
					parseTypeCheck(false, currentIndent());
				} else if (eatText('??')) {
					// Dynamic type checks
					parseTypeCheck(true, currentIndent());
				} else if (eatText('//')) {
					// Keep singleline comments
					readUntil('\n');
					continue;
				} else if (eatText('/*')) {
					// Remove multiline comments
					includeUntil(pos - 2);
					readUntil('*/');
					includedPos = pos;
					continue;
				} else if (isInsideHtml && eatText('</script>')) {
					break;
				}

				next();
			}

			function parseByteString() {
				// Check the beginning '#
				if (cp != 39) return false;
				if (content.charCodeAt(pos + 1) != 35) return false;

				// Check the end #'
				var endPos = pos + 2;
				while (endPos < content.length) {
					var endCp = content.charCodeAt(endPos);
					if (endCp == 39) break;
					if (endCp == 92) endPos += 1;
					endPos += 1;
				}
				if (endPos < pos + 3) return false;
				if (content.charCodeAt(endPos - 1) != 35) return false;

				// This is a byte string
				includeUntil(pos);
				output.push(addByteString(content.substr(pos + 2, endPos - pos - 3)));
				includedPos = endPos + 1;

				while (pos < endPos) next();
				return true;
			}

			function parseTypeCheck(isOptional, indent) {
				var startPos = pos - 2;
				var backPos = pos - 3;
				while (backPos > 0) {
					var backCp = content.charCodeAt(backPos);
					if (! isWhiteSpace(backCp)) break;
					backPos--;
				}
				var labelEnd = backPos + 1;
				while (backPos > 0) {
					var backCp = content.charCodeAt(backPos);
					if (! isLetter(backCp) && ! isDigit(backCp)) break;
					backPos--;
				}
				var labelStart = backPos + 1;
				if (labelStart == labelEnd) warning(here(), 'Type check with empty label.');
				var label = content.substr(labelStart, labelEnd - labelStart);
				var optional = isOptional ? label + ' != null && ' : '';

				while (cp != -1) {
					skipWhiteSpace();
					var condition = readWord();
					if (condition == '') break;
					if (condition == 'Function') {
						typeCheckOutput.push(indent, 'if (', optional, 'typeof ', label, ' !== \'function\') { console.log(\'', label, ' is not a function\'); console.trace(); }\n');
					} else if (condition == 'Number') {
						typeCheckOutput.push(indent, 'if (', optional, 'typeof ', label, ' !== \'number\') { console.log(\'', label, ' is not a number\'); console.trace(); }\n');
					} else if (condition == 'String') {
						typeCheckOutput.push(indent, 'if (', optional, 'typeof ', label, ' !== \'string\') { console.log(\'', label, ' is not a string\'); console.trace(); }\n');
					} else if (condition == 'Boolean') {
						typeCheckOutput.push(indent, 'if (', optional, 'typeof ', label, ' !== \'boolean\') { console.log(\'', label, ' is not a boolean\'); console.trace(); }\n');
					} else if (condition == 'Array') {
						typeCheckOutput.push(indent, 'if (', optional, 'typeof ', label, ' !== \'object\' || ! Array.isArray(', label, ')) { console.log(\'', label, ' is not an array\'); console.trace(); }\n');
					} else if (condition.match(/(^|\.)[A-Z]/)) {
						typeCheckOutput.push(indent, 'if (', optional, '! (', label, ' instanceof ', condition, ')) { console.log(\'', label, ' is not a ', condition, '\'); console.trace(); }\n');
					} else {
						typeCheckOutput.push(indent, 'if (', optional, '! ', label, '.', condition, ') { console.log(\'', label, '.', condition, ' is not defined\'); console.trace(); }\n');
					}
				}

				includeUntil(cp == 41 || cp == 44 || cp == 93 || cp == 125 ? labelEnd : startPos);
				includedPos = pos;
			}

			function skipUntilNotEscaped(endCp) {
				while (cp != -1 && cp != endCp) {
					if (cp == 92) next();
					next();
				}
			}
		}

		function parseCSS(isInsideHtml) {
			while (cp != -1) {
				if (pos == startOfLineContentPos) {
					if (eatWord('INCLUDE')) {
						includeUntil(pos - 7);
						var subIndent = currentIndent();
						var file = readUntil('\n').trim();
						includeFile(path.join(folder, file), subIndent);
						includedPos = pos - 1;
					}
				}

				if (isInsideHtml && eatText('</style>')) {
					break;
				}

				next();
			}
		}

		function generateJavaScript(data) {
			var output = [];
			output.push(data.indent, '// Generated code\n');

			var ids = [];
			for (var label in context.ids)
				ids.push(label);
			ids.sort();
			for (var label of ids)
				output.push(data.indent, 'var ', label, ' = document.getElementById(\'', label, '\');\n');

			var texts = [];
			for (var text in context.byteSequences)
				texts.push(text);
			texts.sort();
			for (var text of texts) {
				var name = context.byteSequences[text];
				output.push(data.indent, 'var ', name, ' = new Uint8Array([', textToCharCodes(text).join(', '), ']);\n');
			}

			return output.join('').trim();

			function textToCharCodes(text) {
				var charCodes = [];
				for (var i = 0; i < text.length; i++)
					charCodes.push(text.charCodeAt(i));
				return charCodes;
			}
		}

		function readUntil(text) {
			var startPos = pos;
			var l = text.length;
			var findCp = text.codePointAt(0);
			while (cp != -1) {
				if (cp == findCp && content.substr(pos, l) == text) break;
				next();
			}
			var endPos = pos;
			while (l > 0) {
				l--;
				next();
			}
			return content.substr(startPos, endPos - startPos);
		}

		function readWord() {
			var startPos = pos;
			while (isLetter(cp) || isDigit(cp)) next();
			return content.substr(startPos, pos - startPos);
		}

		function readXmlWord() {
			var startPos = pos;
			while (isLetter(cp) || isDigit(cp) || cp == 58 || cp == 45) next();	// ns:tag-something
			return content.substr(startPos, pos - startPos);
		}

		function eat(char) {
			if (cp != char.charCodeAt(0)) return false;
			next();
			return true;
		}

		function eatText(text) {
			if (cp != text.charCodeAt(0)) return false;
			var l = text.length;
			if (content.length < pos + l) return false;
			if (content.substr(pos, l) != text) return false;
			for (var i = 0; i < l; i++) next();
			return true;
		}

		function eatWord(text) {
			if (cp != text.charCodeAt(0)) return false;
			var l = text.length;
			if (content.length < pos + l) return false;
			if (content.substr(pos, l) != text) return false;
			var nextCp = content.codePointAt(pos + l);
			if (isDigit(nextCp) || isLetter(nextCp)) return false;
			for (var i = 0; i < l; i++) next();
			return true;
		}

		function includeUntil(pos) {
			output.push(addIndent(content.substr(includedPos, pos - includedPos)));
			includedPos = pos;
		}

		function addIndent(text) {
			return indent == '' ? text : text.replace(/\n/g, '\n' + indent);
		}

		function skipWhiteSpace() {
			while (cp == 32 || cp == 9 || cp == 13 || cp == 10) next();
		}

		function addByteString(text) {
			var label = text.replace(/[^a-zA-Z0-9]/g, '_');
			label = 'b_' + label;
			context.byteSequences[text] = label;
			return label;
		}

		function isLetter(cp) {
			return (cp >= 65 && cp <= 90) || (cp >= 97 && cp <= 122);
		}

		function isDigit(cp) {
			return cp >= 48 && cp <= 57;
		}

		function isWhiteSpace(cp) {
			return cp == 32 || cp == 9 || cp == 10 || cp == 13;
		}

		function runInContext(code, location, indent, folder) {
			context.output = [];
			context.indent = indent;
			context.folder = folder;
			context.location = location;
			context.warning = function(message) { warning(location, message); };
			context.addUnprocessedOutput = function(content) { output.push(content); };

			context.require = function(file) {
				var fullPath = path.resolve(path.join(folder, file));
				return require(fullPath);
			};

			try {
				var result = vm.runInContext(code, context, {filename: source, lineOffset: lineNumber - 1});
				if (result != null && ! code.match(/[;\}]\s*$/)) context.output.push(result);
				var text = context.output.join('').trim();
				context.output = null;
				return text;
			} catch (e) {
				logRunError(e);
				return '';
			}
		}

		function here() {
			return {pos: pos, lineNumber: lineNumber, startOfLinePos: startOfLinePos, startOfLineContentPos: startOfLineContentPos};
		}

		function warning(location, message) {
			console.log(ansi.orange + source + ':' + location.lineNumber + '  ' + message + ansi.reset);
			var startPos = location.startOfLineContentPos == -1 ? location.startOfLinePos : location.startOfLineContentPos;
			var errorMark = pos == location.pos ? ansi.lightGray + ' <<< here' : ansi.red + content.substr(location.pos, pos - location.pos);
			console.log(ansi.mediumGray + content.substr(startPos, location.pos - startPos) + errorMark + ansi.reset);
			console.log('');
		}

		function addId(id, location) {
			if (context.ids[id]) warning(location, 'Duplicate id "' + id + '"!');
			context.ids[id] = true;
		}
	}
}

function runTranslationRule(name, rule) {
	// Start with empty dependencies
	rule.dependencies = {};

	// Read the translation file
	var sources = [];
	var translations = [];
	readTranslationFile(rule.file);
	if (! sources.length) return logOrange(rule.file + ' does not mention any source files.');
	if (! translations.length) return logOrange(rule.file + ' has no translations.');

	function readTranslationFile(file) {
		rule.addDependency(file);
		var content = readTextFileSync(file);
		if (content == null) return;

		var folder = path.dirname(file);

		var lines = content.split(/\n/);
		var index = 0;
		var line = lines[0];
		while (line != null) parse();

		function next() {
			index += 1;
			line = lines[index];
		}

		function parse() {
			while (line != null && line.match(/^\s*$/)) next();
			if (line == null) return;

			var sourceMatch = line.match(/^\s*SOURCE\s+(.*?)\s*$/);
			if (sourceMatch) {
				var file = path.join(folder, sourceMatch[1]);
				var targets = parseBlock();
				for (var i = 0; i < targets.length; i++)
					targets[i] = path.join(folder, targets[i]);
				sources.push({file: file, targets: targets});
				return;
			}

			var includeMatch = line.match(/^\s*INCLUDE\s+(.*?)\s*$/);
			if (includeMatch) {
				next();
				readTranslationFile(path.join(folder, includeMatch[1]));
				return;
			}

			var reMatch = line.match(/^\s*\/(.*?)\/\s*$/);
			if (reMatch) {
				translations.push({re: reMatch[1], block: parseBlock()});
				return;
			}

			translations.push({exact: possiblyQuotedLine(), block: parseBlock()});
		}

		function parseBlock() {
			next();
			var block = [];

			while (line != null && ! line.match(/^\s*$/)) {
				block.push(possiblyQuotedLine());
				next();
			}

			return block;
		}

		function possiblyQuotedLine() {
			var doubleQuotesMatch = line.match(/^\s*"(.*?)"\s*$/);
			if (doubleQuotesMatch) return doubleQuotesMatch[1];
			var singleQuotesMatch = line.match(/^\s*'(.*?)'\s*$/);
			if (singleQuotesMatch) return singleQuotesMatch[1];
			return line.trim();
		}
	}

	// Process all sources
	for (var i = 0; i < sources.length; i++)
		processSource(sources[i]);

	function processSource(source) {
		// Read the source file
		logBlue('Translating ' + source.file);
		rule.addDependency(source.file);
		var content = readTextFileSync(source.file);
		if (! content) return;

		// Write the translation files
		for (var i = 0; i < source.targets.length; i++)
			writeTranslation(content, i, source.targets[i]);
	}

	function writeTranslation(content, row, file) {
		for (var n = 0; n < translations.length; n++) {
			var translation = translations[n];
			if (row >= translation.block.length) continue;
			var to = translation.block[row];
			if (translation.re) translateRe(translation.re, to);
			else if (translation.exact) translateExact(translation.exact, to);
		}

		mkdirSyncIfNecessary(path.parse(file).dir);
		writeTextFileSync(file, content);

		function translateRe(from, to) {
			try {
				content = content.replace(new RegExp(from, 'msg'), replaceWithEscape);
			} catch (e) {
				logOrange(e.message);
			}

			function replaceWithEscape() {
				var args = arguments;
				return to.replace(/\\(.)/g, escape);

				function escape(match, a) {
					if (a == 'n') return '\n';
					if (a == 't') return '\t';
					var c = a.charCodeAt(0);
					if (c >= 48 && c <= 57) return args[c - 48];
					return a;
				}
			}
		}

		function translateExact(from, to) {
			var pos = 0;
			while (true) {
				pos = content.indexOf(from, pos);
				if (pos < 0) break;
				content = content.substr(0, pos) + to + content.substr(pos + from.length);
				pos += to.length;
			}
		}
	}
}

function readTextFileSync(file) {
	try {
		return fs.readFileSync(file, {encoding: 'utf-8'});
	} catch (e) {
		logOrange(file + ' not found.');
		return null;
	}
}

function writeTextFileSync(file, content) {
	var fd = fs.openSync(file, 'w');
	fs.writeSync(fd, content);
	fs.closeSync(fd);
	statCache.invalidate(file);
}

function mkdirSyncIfNecessary(folder) {
	try {
		fs.mkdirSync(folder, {recursive: true});
	} catch (e) {}
}

function StatCache() {
	var entries = {};

	this.stat = function(file) {
		var entry = entries[file];
		if (entry) return entry;

		try {
			var stat = fs.statSync(file);
			return entries[file] = {mtime: stat.mtimeMs, isFile: stat.isFile(), isDir: stat.isDirectory()};
		} catch (e) {
			return entries[file] = {mtime: 0, isFile: false, isDir: false};
		}
	};

	this.invalidate = function(file) {
		delete entries[file];
	};

	this.clear = function() {
		entries = {};
	};
}

function trimRight(text) {
	var match = line.match(/^(.*?)\s*$/);
	return match[1];
}

function createDefaultContext(context) {
	context.fs = fs;
	context.process = process;
	context.child_process = child_process;
	context.path = path;
	context.logBlue = logBlue;
	context.logOrange = logOrange;
	context.logLightGray = logLightGray;
	context.logMediumGray = logMediumGray;
	context.logDarkGray = logDarkGray;
	context.logBlack = logBlack;
	context.fileWasModified = function(file) { statCache.invalidate(file); };
	context.statFile = function(file) { return statCache.stat(file); };
	context.require = require;
	return vm.createContext(context);
}

function logBlue(message) {
	console.log(ansi.blue + message + ansi.reset);
}

function logOrange(message) {
	console.log(ansi.orange + message + ansi.reset);
}

function logLightGray(message) {
	console.log(ansi.mediumGray + message + ansi.reset);
}

function logMediumGray(message) {
	console.log(ansi.mediumGray + message + ansi.reset);
}

function logDarkGray(message) {
	console.log(ansi.mediumGray + message + ansi.reset);
}

function logBlack(message) {
	console.log(message);
}

function logRunError(e) {
	var stack = e.stack;

	// Compilation error
	var compileMatch = stack.match(/^(.*)\s*at createScript \(/s);
	if (compileMatch) return logOrange(compileMatch[1]);

	// Runtime error
	var runMatch = stack.match(/^(.*)\s*at ContextifyScript.Script.runInContext \(/s);
	if (runMatch) return logOrange(runMatch[1]);

	// Something else
	logOrange(stack);
}
